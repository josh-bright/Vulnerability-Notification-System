# Import modules
import requests
import json

# Define JSON formatted print function
def jprint(obj):
    # create a formatted string of the Python JSON object
    text = json.dumps(obj, sort_keys=True, indent=4)
    print(text)

# Define JSON formatted write function
def jwrite(obj):
    # create a formatted string of the Python JSON object
    text = json.dumps(obj, sort_keys=True, indent=4)
    file = open('outputfile.txt', 'a')
    file.write(text)

# Define API call parameters
parameters = {
    "cveId" : "NONE",
    "cpeMatchString" : "cpe:2.3:a:microsoft:exchange_server:2013:",
    "cves" : "True"
}

# Concatenate API query string
queryString = ""

# Define a counter to use in the below 'for' loop
counter = 0

# Iterate through the parameters in the dictionary to concatenate the queryString
for parameter in parameters:

    # Check if given parameter is set, if it is then continue
    if parameters[parameter] != "NONE":

        # Check if this is the first parameter to be added to the string. If it is, then it is preceeded be the '?' symbol
        if counter == 0:
            queryString = "?" + parameter + "=" + parameters[parameter]

        # Failsafe check to ensure this is not the first parameter to be entered. If it is not, then it is added to the string in progress and preceeded by the '&' symbol
        elif counter > 0:
            queryString = queryString + "&" + parameter + "=" + parameters[parameter]
        
        # Advance the parameter counter, to ensure that the '?' and '&' symbols are in the correct places
        counter = counter + 1

# Make API request using concatenated string
response = requests.get("https://services.nvd.nist.gov/rest/json/cves/1.0?" + queryString)

# Convert API response from JSON to a python dictionary, only if the server returned valid results
data = response.json() if response and response.status_code == 200 else {print("ERROR - API Request Status Code: " + response.status_code)}

# Select the dictionary item CVE_Items, which contains all CVEs returned
data = data['result']['CVE_Items']

# Loop through each CVE item and extract ___REQUIRED INFO___
for item in data:
    try:
        print(item['cve']['CVE_data_meta']['ID'])
    except:
        print("ERROR IN CVE LOOP")